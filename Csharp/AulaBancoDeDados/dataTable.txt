Google: datatable c# tablelayoutpanel

private void PopulateTableLayoutPanel(DataTable dt, TableLayoutPanel tableLayoutPanel)
{
   tableLayoutPanel.SuspendLayout(); // Improve performance when adding many controls

   tableLayoutPanel.Controls.Clear(); // Clear existing controls
   tableLayoutPanel.RowStyles.Clear(); // Clear existing row styles
   tableLayoutPanel.ColumnStyles.Clear(); // Clear existing column styles

   // Determine number of rows and columns
   int rowCount = dt.Rows.Count;
   int colCount = dt.Columns.Count;

   // Set up the table layout panel's rows and columns
   tableLayoutPanel.ColumnCount = colCount;
   tableLayoutPanel.RowCount = rowCount + 1; // +1 for header row

   // Add header row
   for (int j = 0; j < colCount; j++)
   {
	   Label headerLabel = new Label();
	   headerLabel.Text = dt.Columns[j].ColumnName;
	   headerLabel.Font = new Font(headerLabel.Font, FontStyle.Bold);
	   tableLayoutPanel.Controls.Add(headerLabel, j, 0);
	   tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f / colCount));
   }

   // Add data rows
   for (int i = 0; i < rowCount; i++)
   {
	   for (int j = 0; j < colCount; j++)
	   {
		   Label dataLabel = new Label();
		   dataLabel.Text = dt.Rows[i][j].ToString();
		   tableLayoutPanel.Controls.Add(dataLabel, j, i + 1); // i+1 to account for header row
	   }
	   tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Absolute, 25)); // Adjust row height as needed
   }

   tableLayoutPanel.ResumeLayout(true);
}